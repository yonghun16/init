"-----------------------------------------------------------------------------
" Filename : .vimrc.local_win
" Writer :  song. Y. H
" Date : 2020. 9. 12
"-----------------------------------------------------------------------------
"
"*****************************************************************************
" .vimrc (~)수정
"*****************************************************************************
"1) vimfiles/autoload/plug.vim 만들기
"2) local_init.vim -> .vimrc.local 로 변경
"3) .vimrc 파일의 아래 코드들은 주석처리하기 
"------------------------------------------
"|  if exists('$SHELL')                   |
"|      set shell=$SHELL                  |
"|  else                                  |
"|      set shell=/bin/sh                 |
"|  endif                                 |
"------------------------------------------

"===== .vimrc 업데이트 명령어 =====
":VimBootstrapUpdate


"===== 아래 코드를 local_init.vim 파일 아래에 넣기 =====

"*****************************************************************************
"" For gVim Windows configs
"*****************************************************************************
if has("win32") || has("win64")
    set cb=unnamed " 클립보드를 unnamed 레지스터로 매핑. (xterm_clipboard 기능이 있을 때에도 매핑 가능)
    "au GUIEnter * simalt ~x	" 전체화면
    win 135 45 		" 창 크기 가로 115 x 세로 35

    " GUI 간략화 설정
    " gVim 메뉴를 사용하지 않는다. (대부분의 명령보다 선행되어야 한다.)
    "	let did_install_default_menus = 1
    "	let did_install_syntax_menu = 1
    "	let skip_syntax_sel_menu = 1
    set go-=m
    set go-=T " 툴바를 보이지 않게 한다.

    " 스크롤바를 표시하지 않는다.
    set go-=l
    set go-=L
    set go-=r
    set go-=R
    set go-=b

    set mouse=a " 마우스를 사용하지 않는다. (누르면 이동되는게 귀찮다!)
    set mousem=popup " 마우스 모델을 popup 으로 함.
    set go+=c " '간단한 선택' 다이얼로그가 새 창에서 뜨지 않도록...

    "=== MS-Windows 관련 설정 ===
    "source $VIMRUNTIME/mswin.vim  	" 윈도우 단축키 리스트 경로 읽기
    "behave mswin 				  	" 윈도우 단축키를 불러들임
    
    " 파일 비교하기 윈도우에 맞게 조금 수정
    set diffexpr=MyDiff()

    function MyDiff()
        let opt = '-a --binary '
        if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
        if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
        let arg1 = v:fname_in
        if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
        let arg2 = v:fname_new
        if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
        let arg3 = v:fname_out
        if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
        let eq = ''
        if $VIMRUNTIME =~ ' '
            if &sh =~ '\<cmd'
                let cmd = '""' . $VIMRUNTIME . '\diff"'
                let eq = '"'
            else
                let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
            endif
        else
            let cmd = $VIMRUNTIME . '\diff'
        endif
        silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
    endfunction
endif

